import { Component, AfterViewInit, ViewChild, OnDestroy } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from "rxjs";
import { Dataset } from "../models/dataset";
import { IssueDetail, ReviewService } from '../services/review.service';
import { Router } from '@angular/router';
import { ConfirmationService } from 'primeng/api';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';

@Component({
  selector: 'app-dataset-feedback',
  templateUrl: './dataset-feedback.component.html',
  styleUrls: ['./dataset-feedback.component.scss'],
  providers: [ConfirmationService]

})
export class DatasetFeedbackComponent implements AfterViewInit, OnDestroy {
  @ViewChild('feedbackText') feedbackTextRef: any;
  locked: boolean;

  feedbackContent!: string | null;
  autoGeneratedFeedback!: string;
  issueDetails: Map<string, IssueDetail> = new Map<string, IssueDetail>();
  combinedIssues: string[] = [];


  issuesSubscription!: Subscription;
  autogeneratedFeedbackSubscription!: Subscription;
  feedbackSubscription!: Subscription;

  feedbackForm = this.formBuilder.group({
    feedbackContent: this.feedbackContent
  }
  );

  constructor(
    private formBuilder: FormBuilder,
    public reviewService: ReviewService,
    private router: Router,
    private confirmationService: ConfirmationService,
    private route: ActivatedRoute
  ) {

    this.route.params.subscribe(params => {
      let doi = params['datasetId'];
      this.reviewService.selectedDatasetId.next(doi);
    });

    this.locked = this.reviewService.isLockedForReviewing();

    this.autogeneratedFeedbackSubscription = this.reviewService.getSelectedDatasetAutoGeneratedFeedback().subscribe(
      (feedback) => { this.autoGeneratedFeedback = feedback?.text }
    );

    this.issuesSubscription = this.reviewService.getSelectedDatasetIssues().subscribe(
      (issues) => {
        if (issues) {
          for (let issue of issues?.details || []) {
            this.issueDetails.set(issue.id, issue);
            if (!issues.manual_checklist.includes(issue.id) && !issues.auto_checklist.includes(issue.id)) {
              this.combinedIssues.push(issue.id);
            }
          }
        }
        this.feedbackContent = reviewService.selectedDatasetSavedFeedback.value;
        if (this.feedbackContent == null) {
          this.feedbackContent = this.autoGeneratedFeedback;
        }
        this.updateFeedbackForm();
        this.saveFeedback();
      }
    )
  }


  ngAfterViewInit(): void {
    if (this.feedbackTextRef) {
      this.feedbackSubscription = fromEvent(this.feedbackTextRef.nativeElement, 'keyup')
        .pipe(
          debounceTime(1000),
          distinctUntilChanged()
        ).subscribe(
          value => {
            this.saveFeedback();
          }

        )
    }
  }


  ngOnDestroy(): void {
    this.issuesSubscription.unsubscribe();
    this.feedbackSubscription.unsubscribe();
    this.autogeneratedFeedbackSubscription.unsubscribe();
  }


  isInReview() {

    return this.reviewService.selectedDataset.value?.status == Dataset.Status.InReview;

  }


  replaceWithAutoGenerated() {
    this.confirmationService.confirm(
      {
        message: `This will replace the current feedback message with one generated from the checklist. Continue?`,
        accept: () => {
          this.feedbackContent = this.autoGeneratedFeedback;
          this.updateFeedbackForm();
          this.saveFeedback();
        }
      }
    );

  }


  emptyFeedbackForm() {
    this.confirmationService.confirm(
      {
        message: `This will delete the current feedback message. Continue?`,
        accept: () => {
          this.feedbackContent = ''
          this.updateFeedbackForm();
          this.saveFeedback();
        }
      }
    );
  }


  updateFeedbackForm() {
    this.feedbackForm.setValue({ feedbackContent: this.feedbackContent });
  }


  saveFeedback() {
    this.reviewService.setFeedback(this.feedbackContent);
  }


  loadFeedback() {
    this.feedbackContent = this.reviewService.getSelectedDatasetFeedback();
  }


  publish(toBePublished: boolean) {
    this.reviewService.selectedDatasetToBePublished = toBePublished;
    this.saveFeedback();
    this.router.navigate(["publish", this.reviewService.selectedDatasetId.value]).then();
  }
}
